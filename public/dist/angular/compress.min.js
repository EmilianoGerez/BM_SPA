var AppConfiguration=function(){var e="main",t=["ngResource","ui.router","ui.bootstrap"],o=function(t,o){angular.module(t,o||[]),angular.module(e).requires.push(t)};return{appName:e,appDependecies:t,registerModule:o}}();angular.module(AppConfiguration.appName,AppConfiguration.appDependecies),AppConfiguration.registerModule("category"),AppConfiguration.registerModule("credit"),AppConfiguration.registerModule("invoice"),AppConfiguration.registerModule("product"),AppConfiguration.registerModule("product_code"),AppConfiguration.registerModule("register"),angular.module("category").config(["$stateProvider",function(e){e.state("listCategories",{url:"/categories",templateUrl:"modules/category/views/list-categories.client.view.html"}).state("createCategory",{url:"/categories/create",templateUrl:"modules/category/views/create-category.client.view.html"}).state("editCategory",{url:"/categories/:id/edit",templateUrl:"modules/category/views/edit-category.client.view.html"})}]),angular.module("category").controller("CategoryController",["$scope","$stateParams","$location","Categories",function(e,t,o,i){e.findAll=function(){e.categories=i.query()},e.findOne=function(){e.category=i.get({id:t.id})},e.create=function(){var t=new i({name:this.name});t.$save(function(e){o.path("categories")},function(t){e.errMessage=t.data})},e.update=function(){e.category.$update(function(){o.path("categories")},function(t){e.errMessage=t.data})},e.remove=function(t){t.$remove(),console.log(t),e.categories=e.categories.filter(function(e){return e._id!==t._id})}}]),angular.module("credit").config(["$stateProvider",function(e){e.state("listCredits",{url:"/credits",templateUrl:"modules/credit/views/list-credits.client.view.html"}).state("createCredit",{url:"/credits/create",templateUrl:"modules/credit/views/create-credit.client.view.html"}).state("editCredit",{url:"/credits/:id/edit",templateUrl:"modules/credit/views/edit-credit.client.view.html"})}]),angular.module("credit").controller("CreditController",["$scope","$stateParams","$location","Credits",function(e,t,o,i){e.findAll=function(){e.credits=i.query()},e.findOne=function(){e.credit=i.get({id:t.id})},e.create=function(){var t=new i({name:this.name,delay:this.delay});t.$save(function(e){o.path("credits")},function(t){e.errMessage=t.data})},e.update=function(){e.credit.$update(function(){o.path("credits")},function(t){e.errMessage=t.data})},e.remove=function(t){t.$remove(),e.credits=e.credits.filter(function(e){return e._id!==t._id})}}]),angular.module("category").factory("Categories",["$resource",function(e){return e("api/categories/:id",{id:"@_id"},{update:{method:"PUT"}})}]),angular.module("credit").factory("Credits",["$resource",function(e){return e("api/credits/:id",{id:"@_id"},{update:{method:"PUT"}})}]),angular.module("invoice").config(["$stateProvider",function(e){e.state("listInvoices",{url:"/invoices",views:{"":{templateUrl:"modules/invoice/views/list-invoice.client.view.html"},"item-container@listInvoices":{templateUrl:"modules/invoice/views/_item-container.html"}}}).state("createInvoice",{url:"/invoices/create",templateUrl:"modules/invoice/views/create-invoice.client.view.html"}).state("viewInvoice",{url:"/invoices/:id",templateUrl:"modules/invoice/views/view-invoice.client.view.html"})}]),angular.module("invoice").controller("InvoiceController",["$scope","$stateParams","$location","$http","Credits","Products","Invoices",function(e,t,o,i,r,a,n){e.invoiceProducts=[],e.addProduct=function(t){e.invoiceProducts.push(t),e.productsData=e.productsData.filter(function(e){return e._id!==t._id})},e.removeProduct=function(t){e.invoiceProducts=e.invoiceProducts.filter(function(e){return e._id!==t._id}),e.productsData.push(t)},e.subTotal=function(){if(""===e.invoiceProducts)return 0;var t=0;return e.invoiceProducts.forEach(function(e){t+=e.price}),t},e.discount=0,e.total=function(){return e.subTotal()-e.discount},e.findSelectData=function(){e.creditsData=r.query(),e.productsData=a.filter.query({filterState:"Available"})},e.getCount=function(){n.api.get(function(t){e.totalItems=t.total,e.numPages=t.total/10})},e.findByPage=function(t){e.invoices=n.api.query({page:t?t:1})},e.pageChanged=function(){e.findByPage(e.currentPage)},e.showSearch=function(){e.searchActive=e.searchActive?!1:!0},e.searchInvoice=function(){e.searchResult=n.search.query({clientName:e.searchName}),e.searchName=""},e.findOne=function(){e.invoice=n.get({id:t.id})},e.create=function(){var t=new n({date:this.dt,clientName:this.clientName,cash:"true"===this.cash?!0:!1,credit_Obj:this.credit,items:e.invoiceProducts,subTotal:e.subTotal(),discount:this.discount,total:e.total()});t.$save(function(t){e.invoiceProducts.forEach(function(t){e.updateState(t)}),o.path("invoices")},function(t){e.errMessage=t.data})},e.remove=function(t){t.$remove(),e.invoices=e.invoices.filter(function(e){return e._id!==t._id})},e.updateState=function(t){t.state="Sold",t.$update(function(){e.findAll()},function(t){e.errMessage=t.data,console.log(t.data)})},e.today=function(){e.dt=new Date},e.today(),e.clear=function(){e.dt=null},e.disabled=function(e,t){return"day"===t&&(0===e.getDay()||7===e.getDay())},e.toggleMin=function(){e.minDate=e.minDate?null:new Date},e.toggleMin(),e.open=function(t){e.status.opened=!0},e.dateOptions={formatYear:"yy",startingDay:1},e.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],e.format=e.formats[0],e.status={opened:!1};var c=new Date;c.setDate(c.getDate()+1);var u=new Date;u.setDate(c.getDate()+2),e.events=[{date:c,status:"full"},{date:u,status:"partially"}],e.getDayClass=function(t,o){if("day"===o)for(var i=new Date(t).setHours(0,0,0,0),r=0;r<e.events.length;r++){var a=new Date(e.events[r].date).setHours(0,0,0,0);if(i===a)return e.events[r].status}return""}}]),angular.module("invoice").factory("Invoices",["$resource",function(e){var t=e("api/invoices:page:limit/:id",{page:"@page",limit:"@limit",id:"@_id"},{update:{method:"PUT"}}),o=e("api/invoices/search/:clientName",{clientName:"@clientName"});return{api:t,search:o}}]),angular.module("main").controller("HomeController",["$scope",function(e){e.who="soy el controlador de FJKSDFKLJSDKLFJ"}]),angular.module("main").config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"modules/main/views/home.client.view.html"})}]),angular.module("product").config(["$stateProvider",function(e){e.state("listProducts",{url:"/products",views:{"":{templateUrl:"modules/product/views/list-products.client.view.html"},"item-container@listProducts":{templateUrl:"modules/product/views/_item-container.html"}}}).state("createProduct",{url:"/products/create",templateUrl:"modules/product/views/create-product.client.view.html"}).state("editProduct",{url:"/products/:productId/edit",templateUrl:"modules/product/views/edit-product.client.view.html"})}]),angular.module("product").controller("ProductController",["$scope","$stateParams","$location","$window","Categories","ProductCodes","Products",function(e,t,o,i,r,a,n){e.findSelectData=function(){e.categoriesData=r.query(),e.productCodesData=a.query()},e.filterProductCodes=function(){e.productCodesFiltered=e.productCodesData.filter(function(t){return t.category_Obj._id===e.category})},e.getCount=function(){n.api.get(function(t){e.totalItems=t.total,e.numPages=t.total/10})},e.pageChanged=function(){e.findByPage(e.currentPage)},e.findByPage=function(t){e.products=n.api.query({page:t?t:1})},e.showSearch=function(t){e.searchActive=e.searchActive?!1:!0,e.productCodesData||(e.productCodesData=a.query())},e.searchProduct=function(){e.searchCode?(e.searchResult=[],console.log("Buscar por codigo de barra")):e.searchName&&(e.searchResult=n.search.query({productName:e.searchName})),e.searchName="",e.searchCode=""},e.findOne=function(){e.product=n.api.get({productId:t.productId})},e.create=function(){var t=new n.api({productCode_Obj:this.productCode,category_Obj:this.category,cost:this.cost,price:this.price,description:this.description});t.$save(function(e){o.path("products")},function(t){e.errMessage=t.data})},e.update=function(){e.product.$update(function(){o.path("products")},function(t){e.errMessage=t.data})},e.updateState=function(t,o){t.state=o,t.$update(function(){e.findByPage()},function(t){e.errMessage=t.data})},e.remove=function(t){var o=i.confirm("Estas seguro de eliminar el producto?");o&&(t.$remove(),e.products=e.products.filter(function(e){return e._id!==t._id}))}}]),angular.module("product_code").config(["$stateProvider",function(e){e.state("listProductCode",{url:"/productCodes",templateUrl:"modules/product-code/views/list-productCodes.client.view.html"}).state("createProductCode",{url:"/productCodes/create",templateUrl:"modules/product-code/views/create-productCode.client.view.html"}).state("editProductCode",{url:"/productCodes/:id/edit",templateUrl:"modules/product-code/views/edit-productCode.client.view.html"})}]),angular.module("product_code").controller("ProductCodeController",["$scope","$stateParams","$location","$http","ProductCodes","Categories",function(e,t,o,i,r,a){e.findCategories=function(){e.categoriesData=a.query()},e.findAll=function(){e.productCodes=r.query()},e.findOne=function(){e.productCode=r.get({id:t.id}),e.findCategories()},e.create=function(){var t=new r({name:this.name,category_Obj:this.category});t.$save(function(e){o.path("productCodes")},function(t){e.errMessage=t.data})},e.update=function(){e.productCode.$update(function(){o.path("productCodes")},function(t){e.errMessage=t.data})},e.remove=function(t){t.$remove(),e.productCodes=e.productCodes.filter(function(e){return e._id!==t._id})}}]),angular.module("product").factory("Products",["$resource",function(e){var t=e("api/products:page:limit/:productId",{page:"@page",limit:"@limit",productId:"@_id"},{update:{method:"PUT"}}),o=e("api/products/state/:filterState",{filterState:"@filterState"}),i=e("api/products/search:productCode/:productName",{productCode:"@productCode",productName:"@productName"});return{api:t,filter:o,search:i}}]),angular.module("product_code").factory("ProductCodes",["$resource",function(e){return e("api/productCodes/:id",{id:"@_id"},{update:{method:"PUT"}})}]),angular.module("register").controller("RegisterController",["$scope","$stateParams","Registers",function(e,t,o){e.getCount=function(){o.api.get(function(t){e.totalItems=t.total,e.numPages=t.total/10})},e.pageChanged=function(){e.findByPage(e.currentPage)},e.findByPage=function(t){e.registers=o.api.query({page:t?t:1})},e.create=function(){var t=new o({deposit:this.deposit,extract:this.extract,comment:this.comment});this.deposit="",this.extract="",this.comment="",this.depositRegister.$setPristine(),t.$save(function(t){e.sucMessage="Transacción exitosa"},function(t){e.errMessage=t.data})}}]),angular.module("register").factory("Registers",["$resource",function(e){var t=e("api/registers:page:limit/:id",{page:"@page",limit:"@limit",id:"@_id"},{update:{method:"PUT"}});return{api:t}}]);
//# sourceMappingURL=data:application/json;base64,